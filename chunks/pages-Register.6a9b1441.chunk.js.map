{"version":3,"sources":["webpack:///./components/pages/Register/index.js","webpack:///./services/validator/index.js"],"names":["Register","Default","modules","Form","Field","Button","useState","input","setInput","error","setError","isProcessing","setIsProcessing","handleInputChange","e","currentTarget","name","value","className","styles","form","placeholder","onChange","label","type","size","onClick","setTimeout","MailValidator","checkForCloseMatch","longString","shortString","length","includes","i","firstPart","substring","secondPart","wrongLetterRegEx","RegExp","test","replace","extraLetterRegEx","missingLetterRegEx","switchedLetters","charAt","join","isCommonDomain","email","domains","split","rightPart","result","checkForCommonTypos","typo","pattern","fix","str","find","checkTypo","trim","toLowerCase","opts","Object","entries","hasError","console","log"],"mappings":"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","file":"chunks/pages-Register.6a9b1441.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport modules from \"components\";\nimport MailValidator from \"services/validator\";\nimport styles from \"./register.css\";\nconst Register = () => {\n  const { Default, Form, Field, Button } = modules;\n  const [input, setInput] = useState({});\n  const [error, setError] = useState(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  const handleInputChange = (e) => {\n    setInput({\n      ...input,\n      [e.currentTarget.name]: e.currentTarget.value,\n    });\n  };\n\n  const validateEmail = (e) => {\n    setIsProcessing(true);\n    setTimeout(function () {\n      setError(MailValidator(input));\n      setIsProcessing(false);\n    }, 1000);\n  };\n\n  return (\n    <Default>\n      {/* Title component renders here */}\n      <h1>Client side</h1>\n      <Form className={styles.form}>\n        <Field\n          name=\"first-name\"\n          placeholder=\"First Name\"\n          onChange={handleInputChange}\n        />\n        <Field\n          name=\"last-name\"\n          label=\"Last Name\"\n          onChange={handleInputChange}\n        />\n        <Field\n          name=\"email\"\n          type=\"email\"\n          label=\"Email\"\n          error={error}\n          onChange={handleInputChange}\n        />\n        <Button size=\"small\" onClick={validateEmail}>\n          {`${isProcessing ? \"Validating...\" : \"Validate\"}`}\n        </Button>\n      </Form>\n    </Default>\n  );\n};\n\nexport default Register;\n","function checkForCloseMatch(longString, shortString) {\n  // too many false positives with very short strings\n  if (shortString.length < 3) return \"\";\n\n  // test if the shortString is in the string (so everything is fine)\n  if (longString.includes(shortString)) return \"\";\n\n  // split the shortString string into two at each postion e.g. g|mail gm|ail gma|il gmai|l\n  // and test that each half exists with one gap\n  for (let i = 1; i < shortString.length; i++) {\n    const firstPart = shortString.substring(0, i);\n    const secondPart = shortString.substring(i);\n\n    // test for wrong letter\n    const wrongLetterRegEx = new RegExp(\n      `${firstPart}.${secondPart.substring(1)}`\n    );\n    if (wrongLetterRegEx.test(longString)) {\n      return longString.replace(wrongLetterRegEx, shortString);\n    }\n\n    // test for extra letter\n    const extraLetterRegEx = new RegExp(`${firstPart}.${secondPart}`);\n    if (extraLetterRegEx.test(longString)) {\n      return longString.replace(extraLetterRegEx, shortString);\n    }\n\n    // test for missing letter\n    if (secondPart !== \"mail\") {\n      const missingLetterRegEx = new RegExp(`${firstPart}{0}${secondPart}`);\n      if (missingLetterRegEx.test(longString)) {\n        return longString.replace(missingLetterRegEx, shortString);\n      }\n    }\n\n    // test for switched letters\n    const switchedLetters = [\n      shortString.substring(0, i - 1),\n      shortString.charAt(i),\n      shortString.charAt(i - 1),\n      shortString.substring(i + 1),\n    ].join(\"\");\n\n    if (longString.includes(switchedLetters)) {\n      return longString.replace(switchedLetters, shortString);\n    }\n  }\n\n  // if nothing was close, then there wasn't a typo\n  return \"\";\n}\n\nconst isCommonDomain = (email) => {\n  const domains = [\n    \"gmail\",\n    \"hotmail\",\n    \"outlook\",\n    \"yahoo\",\n    \"icloud\",\n    \"mail\",\n    \"zoho\",\n  ];\n  const [leftPart, rightPart] = email.split(\"@\");\n\n  for (let i = 0; i < domains.length; i++) {\n    const domain = domains[i];\n\n    const result = checkForCloseMatch(rightPart, domain);\n    if (result) return domains.includes(result.split(\".\")[0]);\n  }\n\n  return domains.includes(rightPart.split(\".\")[0]);\n};\n\nconst checkForCommonTypos = (input) => {\n  const commonTypos = [\n    {\n      pattern: /,com$/,\n      fix: (str) => str.replace(/,com$/, \".com\"),\n    },\n    {\n      pattern: /,co\\.\\w{2}$/,\n      fix: (str) => str.replace(/,(co\\.\\w{2}$)/, \".$1\"),\n    },\n    {\n      pattern: /@\\w*$/,\n      fix: (str) => str + \".com\",\n    },\n  ];\n\n  const typo = commonTypos.find((typo) => typo.pattern.test(input));\n\n  if (typo) return typo.fix(input);\n\n  return \"\";\n};\n\nconst checkTypo = (input) => {\n  const email = input.email.trim().toLowerCase();\n\n  return checkForCommonTypos(email) || isCommonDomain(email);\n};\n\nconst MailValidator = (opts) => {\n  if (Object.entries(opts).length) {\n    let hasError = checkTypo(opts);\n    console.log(hasError);\n    if (hasError)\n      return `We accept registrations only from official accounts. Please register using your official email id`;\n    return hasError;\n  }\n};\n\nexport default MailValidator;\n"],"sourceRoot":""}